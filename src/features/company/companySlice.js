import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchCompanies } from "./companyAPI";

const initialState = {
  loading: false,
  companies: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCompanies = createAsyncThunk(
  "company/getCompanies",
  async () => {
    const response = await fetchCompanies();
    // The value we return becomes the `fulfilled` action payload
    const json = await response.json();
    console.log("companies", json);
    return json;
  }
);

export const companySlice = createSlice({
  name: "company",
  initialState,
  reducers: {
    companyLoading(state) {
      if (!state.loading) state.loading = true;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCompanies.pending, (state) => {
        state.loading = true;
      })
      .addCase(getCompanies.fulfilled, (state, action) => {
        console.log(action.payload);
        if (action.payload.status) state.loading = false;
        else {
          console.log(action.payload);
          state.companies = action.payload;
          state.loading = false;
        }
      });
  },
});

// Action creators are generated for each case reducer function
export const { companyLoading } = companySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCompanyLoading = (state) => state.company.loading;
export const selectCompanies = (state) => state.company.companies;

export default companySlice.reducer;
