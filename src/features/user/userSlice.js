import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { delUser, fetchCandidates, fetchCompanies, updUser } from "./userAPI";

const initialState = {
  loading: false,
  selectedUser: null,
  message: null,
  error: null,
  candidates: [],
  companies: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCandidates = createAsyncThunk(
  "user/getCandidates",
  async () => {
    const response = await fetchCandidates();
    // The value we return becomes the `fulfilled` action payload
    const json = await response.json();
    console.log("candidates", json);
    return json;
  }
);

export const getCompanies = createAsyncThunk("user/getCompanies", async () => {
  const response = await fetchCompanies();
  // The value we return becomes the `fulfilled` action payload
  const json = await response.json();
  console.log("companies", json);
  return json;
});

export const updateUser = createAsyncThunk(
  "user/updateUser",
  async (params) => {
    console.log("upd id", params.id);
    console.log("upd user", params.updatedUser);
    const response = await updUser(params.id, params.updatedUser);
    // // The value we return becomes the `fulfilled` action payload
    // const json = await response.json();
    console.log("response.json", await response.json());
    return await response.json();
  }
);

export const deleteUser = createAsyncThunk("user/deleteUser", async (id) => {
  console.log("del id", id);
  const response = await delUser(id);
  // // The value we return becomes the `fulfilled` action payload
  // const json = await response.json();
  console.log("response.json", await response.json());
  return await response.json();
});

export const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    userLoading(state) {
      if (!state.loading) state.loading = true;
    },
    selectUser(state, action) {
      console.log(action.payload);
      state.selectedUser = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCandidates.pending, (state) => {
        state.loading = true;
      })
      .addCase(getCandidates.fulfilled, (state, action) => {
        console.log(action.payload);
        if (action.payload.status) state.loading = false;
        else {
          console.log(action.payload);
          state.candidates = action.payload;
          state.loading = false;
        }
      });
    builder
      .addCase(getCompanies.pending, (state) => {
        state.loading = true;
      })
      .addCase(getCompanies.fulfilled, (state, action) => {
        console.log(action.payload);
        if (action.payload.status) state.loading = false;
        else {
          console.log(action.payload);
          state.companies = action.payload;
          state.loading = false;
        }
      });
    builder
      .addCase(updateUser.pending, (state) => {})
      .addCase(updateUser.fulfilled, (state, action) => {
        console.log(action.payload);
        if (action.payload.status) state.loading = false;
        else {
          console.log("update fulfilled", action.payload);
          state.selectedUser = null;
        }
      });
    builder.addCase(deleteUser.fulfilled, (state, action) => {
      console.log(action.payload);
      if (action.payload.status) state.loading = false;
      else {
        console.log("delete fulfilled", action.payload);
        // state.candidates = [
        //   ...state.candidates.filter((item) => {
        //     return item.id !== state.selectedUser.id;
        //   }),
        // ];
        // state.companies = [
        //   ...state.companies.filter((item) => {
        //     return item.id !== state.selectedUser.id;
        //   }),
        // ];
        state.selectedUser = null;
      }
    });
    // .addCase(deleteUser.rejected, (state, action) => {
    //   console.log(action.payload);
    // });
  },
});

// Action creators are generated for each case reducer function
export const { userLoading, selectUser } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUserLoading = (state) => state.user.loading;
export const selectCandidates = (state) => state.user.candidates;
export const selectCompanies = (state) => state.user.companies;
export const selectMessage = (state) => state.user.message;
export const selectError = (state) => state.user.error;
export const selectSelectedUser = (state) => state.user.selectedUser;

export default userSlice.reducer;
