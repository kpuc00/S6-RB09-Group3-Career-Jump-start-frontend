import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  delUser,
  fetchCandidates,
  fetchCompanies,
  setAnsweredQuestionnaire,
  updUser,
} from "./userAPI";

const initialState = {
  loading: false,
  error: null,
  message: null,
  processing: false,
  selectedUser: null,
  candidates: [],
  companies: [],
  questionnaireAnsweredSet: false,
};

const defaultErrorMsg = "Something went wrong! Please try again later.";

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCandidates = createAsyncThunk(
  "user/getCandidates",
  async () => {
    const response = await fetchCandidates();
    // The value we return becomes the `fulfilled` action payload
    return { status: response.status, data: await response.json() };
  }
);

export const getCompanies = createAsyncThunk("user/getCompanies", async () => {
  const response = await fetchCompanies();
  return { status: response.status, data: await response.json() };
});

export const updateUser = createAsyncThunk(
  "user/updateUser",
  async (params) => {
    const response = await updUser(params.id, params.updatedUser);
    // // The value we return becomes the `fulfilled` action payload
    return {
      status: response.status,
      text: await response.text(),
      data: params.updatedUser,
    };
  }
);

export const deleteUser = createAsyncThunk("user/deleteUser", async (id) => {
  const response = await delUser(id);
  return {
    status: response.status,
    text: await response.text(),
  };
});

export const setQuestionnaireAnswered = createAsyncThunk(
  "user/setQuestionnaireAnswered",
  async (username) => {
    const response = await setAnsweredQuestionnaire(username);
    return {
      status: response.status,
      text: await response.text(),
    };
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    clearUserState(state) {
      state.loading = false;
      state.processing = false;
      state.selectedUser = null;
      state.candidates = [];
      state.companies = [];
      state.questionnaireAnsweredSet = false;
    },
    userLoading(state) {
      if (!state.loading) state.loading = true;
    },
    selectUser(state, action) {
      state.selectedUser = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCandidates.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(getCandidates.fulfilled, (state, action) => {
        const payload = action.payload;
        if (payload.status === 200) state.candidates = payload.data;
        else state.error = defaultErrorMsg;
        state.loading = false;
      })
      .addCase(getCandidates.rejected, (state) => {
        state.error = defaultErrorMsg;
        state.message = null;
        state.loading = false;
      });
    builder
      .addCase(getCompanies.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(getCompanies.fulfilled, (state, action) => {
        const payload = action.payload;
        if (payload.status === 200) state.companies = payload.data;
        else state.error = defaultErrorMsg;
        state.loading = false;
      })
      .addCase(getCompanies.rejected, (state) => {
        state.error = defaultErrorMsg;
        state.message = null;
        state.loading = false;
      });
    builder
      .addCase(updateUser.pending, (state) => {
        state.processing = true;
        state.error = null;
        state.message = null;
      })
      .addCase(updateUser.fulfilled, (state, action) => {
        const payload = action.payload;
        if (payload.status === 200) {
          state.candidates = [
            ...state.candidates.map((item) => {
              if (item.id !== payload.data.id) {
                // This isn't the item we care about - keep it as-is
                return item;
              }
              // Otherwise, this is the one we want - return an updated value
              return {
                ...item,
                ...payload.data,
              };
            }),
          ];
          state.companies = [
            ...state.companies.map((item) => {
              if (item.id !== payload.data.id) {
                // This isn't the item we care about - keep it as-is
                return item;
              }
              // Otherwise, this is the one we want - return an updated value
              return {
                ...item,
                ...payload.data,
              };
            }),
          ];
          state.message = payload.text;
        } else state.error = defaultErrorMsg;
        state.processing = false;
        state.selectedUser = null;
      })
      .addCase(updateUser.rejected, (state) => {
        state.error = defaultErrorMsg;
        state.message = null;
        state.loading = false;
      });
    builder
      .addCase(deleteUser.pending, (state) => {
        state.processing = true;
        state.error = null;
        state.message = null;
      })
      .addCase(deleteUser.fulfilled, (state, action) => {
        const payload = action.payload;
        if (payload.status === 200) {
          state.candidates = [
            ...state.candidates.filter((item) => {
              return item.id !== state.selectedUser.id;
            }),
          ];
          state.companies = [
            ...state.companies.filter((item) => {
              return item.id !== state.selectedUser.id;
            }),
          ];
        } else state.error = defaultErrorMsg;
        state.processing = false;
        state.selectedUser = null;
      })
      .addCase(deleteUser.rejected, (state) => {
        state.error = defaultErrorMsg;
        state.message = null;
        state.processing = false;
      });
    builder
      .addCase(setQuestionnaireAnswered.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(setQuestionnaireAnswered.fulfilled, (state, action) => {
        const payload = action.payload;
        if (payload.status === 200) {
          state.questionnaireAnsweredSet = true;
          console.log(payload.text);
          state.message = payload.text;
        }
        state.loading = false;
      })
      .addCase(setQuestionnaireAnswered.rejected, (state) => {
        state.error = defaultErrorMsg;
        state.message = null;
        state.loading = false;
      });
  },
});

// Action creators are generated for each case reducer function
export const { clearUserState, userLoading, selectUser } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUserLoading = (state) => state.user.loading;
export const selectUserProcessing = (state) => state.user.processing;
export const selectCandidates = (state) => state.user.candidates;
export const selectCompanies = (state) => state.user.companies;
export const selectMessage = (state) => state.user.message;
export const selectError = (state) => state.user.error;
export const selectSelectedUser = (state) => state.user.selectedUser;
export const selectQuestionnaireAnsweredSet = (state) =>
  state.user.questionnaireAnsweredSet;

export default userSlice.reducer;
