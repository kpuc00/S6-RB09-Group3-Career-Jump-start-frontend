import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import cookie from "react-cookies";
import { login, register, logout } from "./authAPI";

const userCookie = cookie.load("user") || null;
const roles = userCookie ? userCookie.roles : null;

const initialState = {
  loading: false,
  message: null,
  error: null,
  registered: false,
  userLoggedOut: false,
  user: userCookie,
  isCompany: roles ? roles.includes("ROLE_COMPANY") : false,
  isCandidate: roles ? roles.includes("ROLE_CANDIDATE") : false,
  isMatcher: roles ? roles.includes("ROLE_MATCHER") : false,
  isAdmin: roles ? roles.includes("ROLE_ADMIN") : false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginUser = createAsyncThunk(
  "auth/loginUser",
  async (params, thunkAPI) => {
    const response = await login(params.username, params.password);
    // The value we return becomes the `fulfilled` action payload
    return await response.json();
  }
);

export const regUser = createAsyncThunk(
  "auth/regUser",
  async (params, thunkAPI) => {
    const response = await register(
      params.username,
      params.firstName,
      params.lastName,
      params.phoneNumber,
      params.dob,
      params.email,
      params.password,
      params.role
    );
    const json = await response.json();
    return { status: response.status, ...json };
  }
);

export const logoutUser = createAsyncThunk(
  "auth/logoutUser",
  async (params, thunkAPI) => {
    const response = await logout();
    // The value we return becomes the `fulfilled` action payload
    return await response.json();
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    clearAuthState(state) {
      state.loading = false;
      state.registered = false;
      state.userLoggedOut = false;
      state.user = null;
      state.isCompany = false;
      state.isCandidate = false;
      state.isMatcher = false;
      state.isAdmin = false;
    },
    updateUser(state, action) {
      state.user = action.payload;
    },
    setRegisteredState(state, action) {
      state.registered = action.payload;
    },
    setErrorState(state, action) {
      state.error = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginUser.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        if (action.payload.status) {
          state.loading = false;
          state.error = action.payload.error;
        } else {
          state.user = action.payload;
          const role = action.payload.roles[0];
          switch (role) {
            case "ROLE_COMPANY":
              state.isCompany = true;
              break;
            case "ROLE_CANDIDATE":
              state.isCandidate = true;
              break;
            case "ROLE_MATCHER":
              state.isMatcher = true;
              break;
            case "ROLE_ADMIN":
              state.isAdmin = true;
              break;

            default:
              break;
          }
          cookie.save("user", action.payload, {
            path: "/",
            maxAge: 24 * 60 * 60,
          });
          state.loading = false;
        }
      })
      .addCase(loginUser.rejected, (state) => {
        state.loading = false;
        state.error = "Something went wrong! Please try again later.";
      });
    builder
      .addCase(regUser.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
        state.registered = false;
      })
      .addCase(regUser.fulfilled, (state, action) => {
        state.loading = false;
        if (action.payload.status === 200) {
          state.registered = true;
          state.message = action.payload.message;
        } else {
          state.error = action.payload.error;
        }
      })
      .addCase(regUser.rejected, (state) => {
        state.loading = false;
        state.error = "Something went wrong! Please try again later.";
      });
    builder
      .addCase(logoutUser.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(logoutUser.fulfilled, (state, action) => {
        cookie.remove("user");
        state.user = null;
        state.userLoggedOut = true;
        state.isCompany = false;
        state.isCandidate = false;
        state.isMatcher = false;
        state.isAdmin = false;
        state.message = action.payload.message;
        state.loading = false;
      })
      .addCase(logoutUser.rejected, (state) => {
        state.loading = false;
        state.error = "Something went wrong! Please try again later.";
      });
  },
});

export const { clearAuthState, updateUser, setRegisteredState, setErrorState } =
  authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.auth.user;
export const selectLoading = (state) => state.auth.loading;
export const selectIsCompany = (state) => state.auth.isCompany;
export const selectIsCandidate = (state) => state.auth.isCandidate;
export const selectIsMatcher = (state) => state.auth.isMatcher;
export const selectIsAdmin = (state) => state.auth.isAdmin;
export const selectMessage = (state) => state.auth.message;
export const selectError = (state) => state.auth.error;
export const selectIsRegistered = (state) => state.auth.registered;
export const selectUserLoggedOut = (state) => state.auth.userLoggedOut;

export default authSlice.reducer;
