import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { getSoftFactors, getQuestionsBySoftFactorId, postAnswer, updateSoftFactor, postSF, deleteSFAPI, updateQuestionAPI, postQuestionAPI } from "./softfactorAPI";

const initialState = {
  loading: false,
  processing: false,
  softFactors: [],
  questions: [],
  message: "",
  selectedSoftFactor: null,
  selectedQuestion:null,
  softFactor: ""
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getSF = createAsyncThunk(
  "softfactor/getSoftFactors",
  async (thunkAPI) => {
    const response = await getSoftFactors();
    const data = await response.json();
    return data;
  }
);

export const updateSF = createAsyncThunk(
  "softFactor/update",
  async (params) => {
    const response = await updateSoftFactor(params.id, params.updatedSoftFactor);
    const text = await response.text();
    // // The value we return becomes the `fulfilled` action payload
    if (response.ok) return { text, updatedSoftFactor: {id: params.id, ...params.updatedSoftFactor} };
  }
);

export const answerPost = createAsyncThunk(
  "softfactor/answerPost",
  async (params, thunkAPI) => {
    const response = await postAnswer(params.content, params.question);
    const data = await response.json();
    return data;
  }
)

export const addSF = createAsyncThunk(
  "softfactor/postSF",
  async (params) => {
    const response = await postSF(params.newSoftFactor);
    const data = await response.json();
    return data;
  }
)

export const deleteSF = createAsyncThunk(
  "softfactor/delete",
  async (params) => {
    console.log(params.id);
    const response = await deleteSFAPI(params.id);
    const text = await response.json();
    if (response.ok) return { text };
  }
)

export const getQuestionsBySFId = createAsyncThunk(
  "softfactor/getQuestionsBySoftFactorId",
  async (params) => {
    const response = await getQuestionsBySoftFactorId(params.id);
    const data = await response.json();
    return data;
  }
)

export const updateQuestion = createAsyncThunk(
  "questions/update",
  async (params) => {
    console.log("params",params)
    const response = await updateQuestionAPI(params.id, params.updatedQuestion);
    const text = await response.text();
    // // The value we return becomes the `fulfilled` action payload
    if (response.ok) return { text, updatedQuestion: {id: params.id, ...params.updatedQuestion} };
  }
);

export const addQuestion = createAsyncThunk(
  "question/post",
    async (params) => {
      const response = await postQuestionAPI(params.newQuestion);
      const data = await response.json();
      return data;
    }
)
export const softfactorSlice = createSlice({
  name: "softfactor",
  initialState,
  reducers: {
    selectedSoftFactor(state, action) {
      state.selectedSoftFactor = action.payload;
    },
    selectQuestion(state, action) {
      state.selectedQuestion = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getSF.pending, (state) => {
        state.loading = true;
      })
      .addCase(getSF.fulfilled, (state, action) => {
        state.loading = false;
        if (action.payload.status) state.loading = false;
        else {
          state.softFactors = action.payload.item
          state.loading = false
        }
      });
    builder
      .addCase(getQuestionsBySFId.pending, (state) => {
        state.loading = true;
      })
      .addCase(getQuestionsBySFId.fulfilled, (state, action) => {
        state.loading = false;
        if (action.payload.status) state.loading = false;
        else {
          state.questions = action.payload.item
          state.loading = false
        }
      })
    builder
      .addCase(answerPost.pending, (state) => {
        state.loading = true;
      })
      .addCase(answerPost.fulfilled, (state, action) => {
        state.loading = false
        if (action.payload.status) state.loading = false;
        else {
          state.message = action.payload.message
          state.loading = false;
        }
      })
    builder
      .addCase(updateSF.pending, (state) => {
        state.processing = true;
      })
      .addCase(updateSF.fulfilled, (state, action) => {
        state.softFactors = [
          ...state.softFactors.map((item) => {
            if (item.id !== action.payload.updatedSoftFactor.id) {
              // This isn't the item we care about - keep it as-is
              return item;
            }
            // Otherwise, this is the one we want - return an updated value
            return {
              ...item,
              ...action.payload.updatedSoftFactor,
            };
          }),
        ];
        state.processing = false;
        state.selectedSoftFactor = null;
      });
    builder
      .addCase(addSF.pending, (state) => {
        state.loading = true;
      })
      .addCase(addSF.fulfilled, (state, action) => {
        state.loading = false
        if (action.payload.status) state.loading = false;
        else {
          state.message = action.payload.message
          state.softFactors = [
            ...state.softFactors,
            action.payload.item
          ];
          state.loading = false;
        }
      })
      builder
      .addCase(updateQuestion.pending, (state) => {
        state.processing = true;
      })
      .addCase(updateQuestion.fulfilled, (state, action) => {
        state.questions = [
          ...state.questions.map((item) => {
            if (item.id !== action.payload.updatedQuestion.id) {
              // This isn't the item we care about - keep it as-is
              return item;
            }
            // Otherwise, this is the one we want - return an updated value
            return {
              ...item,
              ...action.payload.updatedQuestion,
            };
          }),
        ];
        state.processing = false;
        state.selectedSoftFactor = null;
      });
  },
});

// Action creators are generated for each case reducer function

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const { selectedSoftFactor, selectQuestion } = softfactorSlice.actions;

export const selectSoftFactors = (state) => state.softfactor.softFactors;
export const postMessage = (state) => state.softfactor.message;

export const selectLoading = (state) => state.softfactor.loading;

export const selectSelectedSF = (state) => state.softfactor.selectedSoftFactor;
export const selectSFProcessing = (state) => state.softfactor.processing;

export const selectQuestions = (state) => state.softfactor.questions;
export const selectSelectedQ = (state) => state.softfactor.selectedQuestion;

export default softfactorSlice.reducer;
