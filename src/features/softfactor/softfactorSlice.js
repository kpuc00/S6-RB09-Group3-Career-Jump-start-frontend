import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { getSoftFactors, getQuestionsBySoftFactorId, postAnswer } from "./softfactorAPI";

const initialState = {
  loading: false,
  softFactors: [],
  questions: [],
  questionsAnswered: 0,
  message: "",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getSF = createAsyncThunk(
    "softfactor/getSoftFactors",
    async(thunkAPI) => {
        const response = await getSoftFactors();
        const data = await response.json();
        return data;
    }
)

export const getQuestionsBySFId = createAsyncThunk(
  "softfactor/getQuestionsBySoftFactorId",
  async(params, thunkAPI) => {
    const response = await getQuestionsBySoftFactorId(params.id);
    const data = await response.json();
    console.log("Question loaded", data)
    return data;
  }
)

export const answerPost = createAsyncThunk(
  "softfactor/answerPost",
  async(params, thunkAPI) => {
    const response = await postAnswer(params.content, params.question);
    const data = await response.json();
    console.log(data)
    return data;
  }
)

export const softfactorSlice = createSlice({
  name: "softfactor",
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    .addCase(getSF.pending, (state) => {
      state.loading = true;
    })
    .addCase(getSF.fulfilled, (state, action) => {
      state.loading = false;
      if (action.payload.status) state.loading = false;
      else {
        state.softFactors = action.payload.item
        state.loading = false
      }
    });
    builder
    .addCase(getQuestionsBySFId.pending, (state) => {
      state.loading = true;
    })
    .addCase(getQuestionsBySFId.fulfilled, (state, action) => {
      state.loading = false;
      if (action.payload.status) state.loading = false;
      else{
        state.questions = action.payload.item
        state.loading = false
      }
    })
    builder
    .addCase(answerPost.pending, (state)=>{
      state.loading = true;
    })
    .addCase(answerPost.fulfilled, (state, action) => {
      state.loading = false
      if (action.payload.status) state.loading = false;
      else {
        console.log("answerPost fulffilled");
        state.questionsAnswered += 1;
        state.message = action.payload.message;
        state.loading = false;
      }
    })
  },
});

// Action creators are generated for each case reducer function

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectSoftFactors = (state) => state.softfactor.softFactors
export const selectQuestions = (state) => state.softfactor.questions
export const selectQuestionsAnswered = (state) => state.softfactor.questionsAnswered
export const postMessage = (state) => state.softfactor.message

export default softfactorSlice.reducer;
